datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  username                  String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  role                      UserRole  @default(USER)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  refreshToken              String?   @unique
  lastLogin                 DateTime?
  lastLimitReset            DateTime?
  currentLimit              Int?
  sampleSubmissionCount     Int       @default(200)
  lastSampleSubmissionReset DateTime  @default(now())
  rating                    Int?
  rank                      Int?

  accounts        Account[]
  problems        Problem[]
  submissions     Submission[]
  RevokedToken    RevokedToken[]
  Session         Session[]
  ApiKey          ApiKey[]
  createdContests Contest[]      @relation("Creator")
  contestEntries  ContestUser[]  @relation("Participant")

  @@index([email])
  @@index([createdAt])
  @@index([refreshToken])
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RevokedToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  expiresAt DateTime
  reason    String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([jti])
  @@index([expiresAt])
}

model Problem {
  id String @id @default(cuid())

  title              String
  slug               String     @unique
  description        String?
  difficulty         Difficulty
  author             String
  parameters         Json       @default("[]")
  tags               String[]
  baselineBenchmarks Json?      @default("{}")

  definition String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?

  contestProblems ContestProblem[]
  visibility      ProblemVisibility @default(PUBLIC)
  contest         Boolean           @default(false)

  @@index([author])
  @@index([difficulty])
  @@index([slug])
}

model Submission {
  id          String  @id @default(cuid())
  code        String  @db.Text
  language    String
  status      String? // Can be: PENDING, CHECKING, BENCHMARKING, ACCEPTED, ERROR, WRONG_ANSWER, TIMEOUT
  runtime     Float?
  memory      Int?
  passedTests Int?
  totalTests  Int?
  logs        String? @db.Text
  gpuType     String?
  timeMs      Float?
  memoryMB    Float?
  verified    Boolean @default(false)

  gflops           Float?
  errorMessage     String?
  errorDetails     String? @db.Text
  benchmarkResults Json?

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  createdAt DateTime @default(now())

  callId   String?
  isPublic Boolean @default(false)

  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ProblemVisibility {
  PUBLIC
  PRIVATE
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  keyPrefix String   @unique
  key       String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
}

enum ContestStatus {
  UPCOMING
  ACTIVE
  FINISHED
  ARCHIVED
}

model Contest {
  id           String           @id @default(cuid())
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  status       ContestStatus    @default(UPCOMING)
  creatorId    String
  creator      User             @relation("Creator", fields: [creatorId], references: [id])
  problems     ContestProblem[]
  participants ContestUser[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ContestProblem {
  id        String  @id @default(cuid())
  contestId String
  problemId String
  contest   Contest @relation(fields: [contestId], references: [id])
  problem   Problem @relation(fields: [problemId], references: [id])

  @@unique([contestId, problemId])
}

model ContestUser {
  id           String   @id @default(cuid())
  contestId    String
  userId       String
  registeredAt DateTime @default(now())
  contest      Contest  @relation(fields: [contestId], references: [id])
  user         User     @relation("Participant", fields: [userId], references: [id])

  @@unique([contestId, userId])
}
