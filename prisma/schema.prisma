datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  username                  String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  refreshToken              String?   @unique
  lastLogin                 DateTime?
  lastLimitReset            DateTime?
  currentLimit              Int?
  totalSampleSubmissions    Int       @default(0)
  sampleSubmissionCount     Int       @default(200)
  lastSampleSubmissionReset DateTime  @default(now())
  rating                    Int?
  rank                      Int?

  accounts          Account[]
  problems          Problem[]
  submissions       Submission[]
  RevokedToken      RevokedToken[]
  Session           Session[]
  ApiKey            ApiKey[]
  workspaces        Workspace[]
  SandboxSubmission SandboxSubmission[]
  snapshots         Snapshot[]
  BlogPost          BlogPost[]
  Comment           Comment[]
  PostUpvote        PostUpvote[]
  CommentUpvote     CommentUpvote[]

  @@index([email])
  @@index([createdAt])
  @@index([refreshToken])
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RevokedToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  expiresAt DateTime
  reason    String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([jti])
  @@index([expiresAt])
}

model Problem {
  id String @id @default(cuid())

  title              String
  slug               String     @unique
  description        String?
  difficulty         Difficulty
  author             String
  parameters         Json       @default("[]")
  tags               String[]
  baselineBenchmarks Json?      @default("{}")

  definition String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?

  @@index([author])
  @@index([difficulty])
  @@index([slug])
}

model Submission {
  id          String  @id @default(cuid())
  code        String  @db.Text
  language    String
  status      String? // Can be: PENDING, CHECKING, BENCHMARKING, ACCEPTED, ERROR, WRONG_ANSWER, TIMEOUT
  runtime     Float?
  memory      Int?
  passedTests Int?
  totalTests  Int?
  logs        String? @db.Text
  gpuType     String?
  timeMs      Float?
  memoryMB    Float?
  verified    Boolean @default(false)

  gflops           Float?
  errorMessage     String?
  errorDetails     String? @db.Text
  benchmarkResults Json?

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  createdAt DateTime @default(now())

  callId    String?
  isPublic  Boolean              @default(false)
  blogPosts BlogPostSubmission[]

  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum PostType {
  GENERAL
  SOLUTION
  COMPARISON
  TUTORIAL
  BENCHMARK_ANALYSIS
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TagCategory {
  GENERAL
  PROBLEM
  LANGUAGE
  OPTIMIZATION
  DIFFICULTY
  TOPIC
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  keyPrefix String   @unique
  key       String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     Json
  main      String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  snapshots Snapshot[]

  @@unique([slug, userId])
}

model SandboxSubmission {
  id            String   @id @default(cuid())
  code          String   @db.Text
  language      String
  status        String?
  stdout_output String?  @db.Text
  error_message String?
  error_details String?
  logs          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Snapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  files     Json
  main      String

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model BlogPost {
  id              String     @id @default(cuid())
  title           String
  content         String     @db.Text
  slug            String?    @unique
  excerpt         String?    @db.Text
  postType        PostType   @default(GENERAL)
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  viewCount       Int        @default(0)
  readTimeMinutes Int?
  authorId        String
  author          User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  comments    Comment[]
  upvotes     PostUpvote[]
  tags        BlogPostTag[]
  submissions BlogPostSubmission[]

  @@index([authorId])
  @@index([createdAt]) // sort by newest
  @@index([slug])
  @@index([status])
  @@index([postType])
  @@index([publishedAt])
}

model Comment {
  id              String          @id @default(cuid())
  postId          String
  post            BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId        String
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content         String          @db.Text
  // threading
  parentCommentId String?
  parent          Comment?        @relation("Thread", fields: [parentCommentId], references: [id], onDelete: Cascade)
  children        Comment[]       @relation("Thread")
  createdAt       DateTime        @default(now())
  upvotes         CommentUpvote[]

  @@index([postId, createdAt]) // helps thread pagination
}

model PostUpvote {
  id        String   @id @default(cuid())
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId]) // 1 upvote per user per post
  @@index([userId])
}

model CommentUpvote {
  id        String   @id @default(cuid())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([commentId, userId]) // 1 upvote per user per comment
  @@index([commentId])
}

model BlogPostSubmission {
  id           String   @id @default(cuid())
  postId       String
  submissionId String
  order        Int      @default(0)
  description  String?  @db.Text
  createdAt    DateTime @default(now())

  post       BlogPost   @relation(fields: [postId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([postId, submissionId])
  @@index([postId])
  @@index([submissionId])
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  category    TagCategory @default(GENERAL)
  createdAt   DateTime    @default(now())

  posts BlogPostTag[]

  @@index([slug])
  @@index([category])
}

model BlogPostTag {
  id        String   @id @default(cuid())
  postId    String
  tagId     String
  createdAt DateTime @default(now())

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}
